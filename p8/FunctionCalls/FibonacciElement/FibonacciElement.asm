    @256 // 0
    D=A // 1
    @0 // 2
    M=D // 3
    @1 // 4
    MD=-1 // 5
    @2 // 6
    MD=D-1 // 7
    @3 // 8
    MD=D-1 // 9
    @4 // 10
    MD=D-1 // 11
    @bootstrap$ret. // 12
    D=A // 13
    @SP // 14
    M=M+1 // 15
    A=M-1 // 16
    M=D // 17
    @1 // 18
    D=M // 19
    @SP // 20
    M=M+1 // 21
    A=M-1 // 22
    M=D // 23
    @2 // 24
    D=M // 25
    @SP // 26
    M=M+1 // 27
    A=M-1 // 28
    M=D // 29
    @3 // 30
    D=M // 31
    @SP // 32
    M=M+1 // 33
    A=M-1 // 34
    M=D // 35
    @4 // 36
    D=M // 37
    @SP // 38
    M=M+1 // 39
    A=M-1 // 40
    M=D // 41
    @0 // 42
    D=M // 43
    @1 // 44
    M=D // 45
    @5 // 46
    D=D-A // 47
    @2 // 48
    M=D // 49
    @Sys.init // 50
    0;JMP // 51
(bootstrap$ret.)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
    @2 // 52
    AD=M // 53
    D=M // 54
    @SP // 55
    M=M+1 // 56
    A=M-1 // 57
    M=D // 58
// push constant 2
    @2 // 59
    D=A // 60
    @SP // 61
    M=M+1 // 62
    A=M-1 // 63
    M=D // 64
// lt
    @SP // 65
    AM=M-1 // 66
    D=M // 67
    A=A-1 // 68
    MD=M-D // 69
    @__LABEL0 // 70
    D;JLT // 71
    @SP // 72
    A=M-1 // 73
    M=0 // 74
    @__LABEL1 // 75
    0;JMP // 76
(__LABEL0)
    @SP // 77
    A=M-1 // 78
    M=-1 // 79
(__LABEL1)
// if-goto Main.fibonacci$IF_TRUE
    @SP // 80
    AM=M-1 // 81
    D=M // 82
    @Main.fibonacci$IF_TRUE // 83
    D;JNE // 84
// goto Main.fibonacci$IF_FALSE
    @Main.fibonacci$IF_FALSE // 85
    0;JMP // 86
// label Main.fibonacci$IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
    @2 // 87
    AD=M // 88
    D=M // 89
    @SP // 90
    M=M+1 // 91
    A=M-1 // 92
    M=D // 93
// return
    @1 // 94
    D=M // 95
    @5 // 96
    D=D-A // 97
    A=D // 98
    D=M // 99
    @R14 // 100
    M=D // 101
    @SP // 102
    AM=M-1 // 103
    D=M // 104
    @2 // 105
    A=M // 106
    M=D // 107
    D=A+1 // 108
    @R15 // 109
    M=D // 110
    @1 // 111
    D=M // 112
    @0 // 113
    M=D // 114
    @SP // 115
    AM=M-1 // 116
    D=M // 117
    @4 // 118
    M=D // 119
    @SP // 120
    AM=M-1 // 121
    D=M // 122
    @3 // 123
    M=D // 124
    @SP // 125
    AM=M-1 // 126
    D=M // 127
    @2 // 128
    M=D // 129
    @SP // 130
    AM=M-1 // 131
    D=M // 132
    @1 // 133
    M=D // 134
    @R15 // 135
    D=M // 136
    @0 // 137
    M=D // 138
    @R14 // 139
    A=M // 140
    0;JMP // 141
// label Main.fibonacci$IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
    @2 // 142
    AD=M // 143
    D=M // 144
    @SP // 145
    M=M+1 // 146
    A=M-1 // 147
    M=D // 148
// push constant 2
    @2 // 149
    D=A // 150
    @SP // 151
    M=M+1 // 152
    A=M-1 // 153
    M=D // 154
// sub
    @SP // 155
    AM=M-1 // 156
    D=M // 157
    A=A-1 // 158
    MD=M-D // 159
// call Main.fibonacci 1
    @Main.fibonacci$ret.0 // 160
    D=A // 161
    @SP // 162
    M=M+1 // 163
    A=M-1 // 164
    M=D // 165
    @1 // 166
    D=M // 167
    @SP // 168
    M=M+1 // 169
    A=M-1 // 170
    M=D // 171
    @2 // 172
    D=M // 173
    @SP // 174
    M=M+1 // 175
    A=M-1 // 176
    M=D // 177
    @3 // 178
    D=M // 179
    @SP // 180
    M=M+1 // 181
    A=M-1 // 182
    M=D // 183
    @4 // 184
    D=M // 185
    @SP // 186
    M=M+1 // 187
    A=M-1 // 188
    M=D // 189
    @0 // 190
    D=M // 191
    @1 // 192
    M=D // 193
    @6 // 194
    D=D-A // 195
    @2 // 196
    M=D // 197
    @Main.fibonacci // 198
    0;JMP // 199
(Main.fibonacci$ret.0)
// push argument 0
    @2 // 200
    AD=M // 201
    D=M // 202
    @SP // 203
    M=M+1 // 204
    A=M-1 // 205
    M=D // 206
// push constant 1
    @1 // 207
    D=A // 208
    @SP // 209
    M=M+1 // 210
    A=M-1 // 211
    M=D // 212
// sub
    @SP // 213
    AM=M-1 // 214
    D=M // 215
    A=A-1 // 216
    MD=M-D // 217
// call Main.fibonacci 1
    @Main.fibonacci$ret.1 // 218
    D=A // 219
    @SP // 220
    M=M+1 // 221
    A=M-1 // 222
    M=D // 223
    @1 // 224
    D=M // 225
    @SP // 226
    M=M+1 // 227
    A=M-1 // 228
    M=D // 229
    @2 // 230
    D=M // 231
    @SP // 232
    M=M+1 // 233
    A=M-1 // 234
    M=D // 235
    @3 // 236
    D=M // 237
    @SP // 238
    M=M+1 // 239
    A=M-1 // 240
    M=D // 241
    @4 // 242
    D=M // 243
    @SP // 244
    M=M+1 // 245
    A=M-1 // 246
    M=D // 247
    @0 // 248
    D=M // 249
    @1 // 250
    M=D // 251
    @6 // 252
    D=D-A // 253
    @2 // 254
    M=D // 255
    @Main.fibonacci // 256
    0;JMP // 257
(Main.fibonacci$ret.1)
// add
    @SP // 258
    AM=M-1 // 259
    D=M // 260
    A=A-1 // 261
    MD=M+D // 262
// return
    @1 // 263
    D=M // 264
    @5 // 265
    D=D-A // 266
    A=D // 267
    D=M // 268
    @R14 // 269
    M=D // 270
    @SP // 271
    AM=M-1 // 272
    D=M // 273
    @2 // 274
    A=M // 275
    M=D // 276
    D=A+1 // 277
    @R15 // 278
    M=D // 279
    @1 // 280
    D=M // 281
    @0 // 282
    M=D // 283
    @SP // 284
    AM=M-1 // 285
    D=M // 286
    @4 // 287
    M=D // 288
    @SP // 289
    AM=M-1 // 290
    D=M // 291
    @3 // 292
    M=D // 293
    @SP // 294
    AM=M-1 // 295
    D=M // 296
    @2 // 297
    M=D // 298
    @SP // 299
    AM=M-1 // 300
    D=M // 301
    @1 // 302
    M=D // 303
    @R15 // 304
    D=M // 305
    @0 // 306
    M=D // 307
    @R14 // 308
    A=M // 309
    0;JMP // 310
// function Sys.init 0
(Sys.init)
// push constant 4
    @4 // 311
    D=A // 312
    @SP // 313
    M=M+1 // 314
    A=M-1 // 315
    M=D // 316
// call Main.fibonacci 1
    @Sys.init$ret.0 // 317
    D=A // 318
    @SP // 319
    M=M+1 // 320
    A=M-1 // 321
    M=D // 322
    @1 // 323
    D=M // 324
    @SP // 325
    M=M+1 // 326
    A=M-1 // 327
    M=D // 328
    @2 // 329
    D=M // 330
    @SP // 331
    M=M+1 // 332
    A=M-1 // 333
    M=D // 334
    @3 // 335
    D=M // 336
    @SP // 337
    M=M+1 // 338
    A=M-1 // 339
    M=D // 340
    @4 // 341
    D=M // 342
    @SP // 343
    M=M+1 // 344
    A=M-1 // 345
    M=D // 346
    @0 // 347
    D=M // 348
    @1 // 349
    M=D // 350
    @6 // 351
    D=D-A // 352
    @2 // 353
    M=D // 354
    @Main.fibonacci // 355
    0;JMP // 356
(Sys.init$ret.0)
// label Sys.init$WHILE
(Sys.init$WHILE)
// goto Sys.init$WHILE
    @Sys.init$WHILE // 357
    0;JMP // 358
