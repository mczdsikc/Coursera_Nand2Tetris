// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=Ainstr);

    // set instruction[15] for C-instr, then set instruction[4] to store ALU result in D reg
    And(a=instruction[15],b=instruction[4],out=selD);
    // [D-Register] if (C-instr & instruction[4]), D reg is loaded a new value
    DRegister(in=ALUout,load=selD,out=Dout);

    // set instruction[15] for C-instr, then set instruction[5] to store ALU result in A reg
    And(a=instruction[15],b=instruction[5],out=selA);
    // [first Mux] set selA to choose ALUout, else choose input instruction
    Mux16(a=instruction,b=ALUout,sel=selA,out=toA);
    // [A-Register] if (A-instr | instruction[5]), A reg is loaded a new value
    Or(a=Ainstr,b=instruction[5],out=aload);
    ARegister(in=toA,load=aload,out=Aout,out[0..14]=addressM);

    // [second Mux] set instruction[12] to choose inM, else choose Aout
    Mux16(a=Aout,b=inM,sel=instruction[12],out=AorM);

    // [ALU] x = D, y = AorM, instruction[11..6] is c1..c6
    ALU(x=Dout,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],
                      ny=instruction[8],  f=instruction[7], no=instruction[6],
        out=ALUout,out=outM,zr=zr,ng=ng);

    // set instruction[15] for C-instr, then set instruction[3] to set output writeM
    And(a=instruction[15],b=instruction[3],out=writeM);

    // [PC] if (C-instr & jump conditoins), PC is loaded a new value; inc is always true
    // jump conditoins
    Or(a=zr, b=ng, out=notps);
    Not(in=notps, out=ps);
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    And(a=ps, b=instruction[0], out=j3);
    Or(a=j1,b=j2,out=j4);
    Or(a=j3,b=j4,out=j5);
    And(a=instruction[15],b=j5,out=jmp);
    PC(in=Aout,load=jmp,inc=true,reset=reset,out[0..14]=pc);

}